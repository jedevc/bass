; sets the :insecure field of the thunk to true
;
; => (insecure! (.boom))
(defn insecure! [thunk]
  (with-insecure thunk true))

(provide ($)
  (defn resolve-arg [a scope]
    (if (symbol? a)
      (let [word (symbol->string a)
            start (substring word 0 1)]
        (if (= start "$")
          (eval (string->symbol (substring word 1)) scope)
          (eval word scope)))
      (eval a scope)))

  (defn resolve-cmd [a scope]
    (let [val (resolve-arg a scope)]
      (if (string? val)
        (string->cmd-path val)
        val)))

  (defn resolve-args [args scope]
    (case args
      [] []
      [a & as] (cons (resolve-arg a scope)
                     (resolve-args as scope))
      splat (resolve-arg splat scope)))

  ; constructs a thunk with args
  ;
  ; Symbol arguments are automatically converted to strings. Symbols beginning
  ; with $ are resolved to their binding with the leading $ removed.
  ;
  ; => ($ sh -c "echo Hello, world!")
  (defop $ args scope
    (with-args scratch (resolve-args args scope))))

; chain a sequence of thunks starting from an initial image
;
; => (from (linux/alpine) ($ echo "Hello, world!"))
^:indent
(defn from [image & thunks]
  (foldl (fn [base cmd] (with-image cmd base)) image thunks))

; chain a sequence of thunks with a given working directory
;
; Shorthand for using [with-mount] to mount ./ on the first thunk and
; chaining the rest using [from]. The working directory will propagate
; between them.
;
; Typically used within an outer [from] which sets the first thunk's image in
; order to join it into the chain.
;
; => (from (linux/alpine) (cd *dir* ($ find ./)))
^:indent
(defn cd [dir thunk & thunks]
  (apply from (cons (with-mount thunk dir ./) thunks)))

; prepend a command + args to a thunk's command + args
;
; Replaces the thunk's run path sets its args to and prepend-args prepended to
; the original cmd + args.
;
; => (wrap-cmd ($ go test "./...") .strace "-f")
(defn wrap-cmd [thunk & args]
  (-> thunk
      (with-args (concat args (thunk-args thunk)))))

(provide [linux]
  (defn memo-resolve [memos]
    (if (null? memos)
      resolve
      (memo memos (.run) :resolve)))

  (defn join [delim strs]
    (case strs
      [] ""
      [s] s
      [s & ss] (str s delim (join delim ss))))

  (defn path-resolver [do-resolve platform names]
    (fn optional
      (case optional
        []
        (do-resolve
          {:platform platform
           :repository (join "/" names)
           :tag "latest"})

        [tag-or-path]
        (cond
          (or (symbol? tag-or-path) (string? tag-or-path))
          (do-resolve
            {:platform platform
             :repository (join "/" names)
             :tag (str tag-or-path)})

          (path? tag-or-path)
          (path-resolver do-resolve
                         platform
                         (conj names (path-name tag-or-path)))

          true
          (error "invalid image path segment" :segment tag-or-path)))))

  ; returns a path root for resolving images with the given platform
  ;
  ; Memoizes image resolution into memos.
  ;
  ; => (def linux (path {:os "linux"} null))
  ;
  ; => (linux/ubuntu)
  ;
  ; => (linux/ubuntu :18.04)
  ;
  ; => (linux/docker.io/library/ubuntu :18.04)
  (defn path [platform memos]
    (let [res (if memos (memo-resolve memos) resolve)]
      (path-resolver res platform [])))

  ; a path root for resolving Linux images
  ;
  ; Memoizes image resolution into the caller's *memos*, if set.
  ;
  ; => (linux/ubuntu)
  ;
  ; => (linux/ubuntu :18.04)
  ;
  ; => (linux/docker.io/library/ubuntu :18.04)
  (defop linux args scope
    (let [path-root (path {:os "linux"} (:*memos* scope null))]
      (eval [path-root & args] scope))))

; returns an image that will be built from a Dockerfile in the context
; directory
;
; Additional parameters may be passed as opts:
;
; :target specifies a target stage to build.
;
; :args specifies build args from a scope with string values.
;
; :dockerfile specifies a path to a Dockerfile within the context directory.
;
; => (docker-build *dir* {:os "linux"})
;
; => (docker-build *dir* {:os "linux"} :target "foo")
;
; => (docker-build *dir* {:os "linux"} :dockerfile ./Dockerfile.foo)
;
; => (docker-build *dir* {:os "linux"} :args {:FOO "bar"})
(defn docker-build [context platform & opts]
  (merge
    {:platform platform
     :docker_build context}
    (list->scope opts)))
