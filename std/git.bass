(provide [ls-remote checkout path]
  (def *git-image*
    (case (next *stdin* :none)
      :none (error "git image must be provided")
      image (from image
              ; ignore any entrypoint, we just run regular git commands
              (with-entrypoint ($) []))))

  ; resolves a ref to a sha at the remote repo
  ;
  ; Does not cache. Used to resolve the ref at a point in time.
  ;
  ; => (use (.git (linux/alpine/git)))
  ;
  ; => (git:ls-remote "https://github.com/vito/bass" "main")
  (defn ls-remote [repo ref & timestamp]
    (-> ($ git ls-remote $repo $ref)
        (with-image *git-image*)
        (with-label :at (if (empty? timestamp) (now 0) (first timestamp)))
        (read :unix-table)
        next
        first))

  (defn clone [repo]
    (from *git-image*
      ($ git clone $repo ./)))

  (defn checkout-init [thunk ref]
    (from thunk
      ; we may be given a commit from an obscure ref, so we'll need to make
      ; sure it's fetched first
      ($ git fetch origin $ref)

      ; checkout the commit (note: this puts us on a detached HEAD)
      ($ git checkout $ref)

      ; opinion: submodules being initialized is a baseline assumption when
      ; working with any git repository. it's incredibly annoying to have
      ; things trip on this by default. yes, it may take time if your repo
      ; has a hundred submodules and you only need a handful. if you need
      ; something more shophisticated, don't use this.
      ($ git submodule update --init --recursive)))

  ; returns the repo checked out to the given ref
  ;
  ; The thunk for cloning the repo is labeled with the given ref. If the ref
  ; refers to a branch, you may want to resolve it to a sha first with
  ; [git:ls-remote] so that it's not cached forever.
  ;
  ; Submodules are always initialized.
  ;
  ; => (use (.git (linux/alpine/git)))
  ;
  ; => (git:checkout "https://github.com/vito/bass" "ea8cae6d4c871cb14448d7254843d86dbab8505f")
  (defn checkout [repo ref]
    (-> (clone repo)
        (checkout-init ref)
        (subpath ./)))

  (defn memo-ls-remote [memos]
    (memo memos (.git *git-image*) :ls-remote))

  (defn arg [path-or-str]
    (if (string? path-or-str)
      path-or-str
      (path-name path-or-str)))

  ; returns a path root for repos at the given base URL
  ;
  ; Please omit the trailing slash. (TODO: would be nice to just strip it or
  ; somehow make it a non-issue.)
  ;
  ; => (use (.git (linux/alpine/git)))
  ;
  ; => (def gh (git:path "https://github.com" null))
  ;
  ; => gh/vito/bass/ref/main/
  ^{:paths [[:user :repo ./sha/ :sha]
            [:user :repo ./ref/ :ref]]}
  (defn path [root memos]
    (curryfn [user repo route val]
      (let [lsr (if memos (memo-ls-remote memos) ls-remote)
            uri (str root "/" (arg user) "/" (arg repo))
            ref (arg val)
            sha (case route
                  ./sha/ ref
                  ./ref/ (lsr uri ref))]
        (checkout uri sha)))))

; a path root for repos hosted at github.com
;
; Memoizes ref resolution into the caller's *memos*, if set.
;
; => (use (.git (linux/alpine/git)))
;
; => git:github/vito/bass/sha/ea8cae6d4c871cb14448d7254843d86dbab8505f/
;
; => (git:github/vito/bass/sha/ "ea8cae6d4c871cb14448d7254843d86dbab8505f")
;
; => git:github/vito/bass/ref/main/
(defop github args scope
  (let [path-root (path "https://github.com" (:*memos* scope null))]
    (eval [path-root & args] scope)))
