\title{bass}{index}
\use-plugin{bass-www}
\styled{splash}

Bass is a scripting language for running commands and caching the shit out of
them.

Bass's goal is to make shipping software predictable, repeatable, and fun. The
plan is to support sophisticated CI/CD flows while sticking to familiar ideas.
CI/CD boils down to running commands. Bass leverages that instead of trying to
replace it.

If you'd like to try it out, grab the \link{latest
release}{https://github.com/vito/bass/releases/latest} and skim the
\reference{getting-started}{guide}!

\demo-literate{thunks & thunk paths}{
  Commands are represented as a data value called a \t{thunk}. Thunks are
  rendered as space invaders.
}{{{
  (from (linux/alpine)
    ($ echo "Hello, world!"))
}}}{
  You can \b{run} a thunk, \b{read} its output, or check if it \b{succeeds?}.
}{{{
  (def thunk
    (from (linux/alpine)
      ($ echo "Hello, world!")))

  [(run thunk) (next (read thunk :raw)) (succeeds? thunk)]
}}}{
  Files created by a thunk can be referenced as \t{thunk paths}.
}{{{
  (def create-file
    (from (linux/alpine)
      ($ sh -c "echo hello >> file")))

  create-file/file
}}}{
  Thunk paths can be passed to other thunks.
}{{{
  (from (linux/alpine)
    ($ cat create-file/file))
}}}{
  Like thunks, thunk paths are just data values. The underlying thunk only runs
  when another thunk that needs it runs, or when you \b{read} the path itself.
}{{{
  (-> (from (linux/alpine)
        ($ cat create-file/file))
      (read :raw)
      next)
}}}

\demo-literate{fetching git repos \aux{& other inputs}}{
  To fetch source code from a \link{\code{git}}{https://git-scm.com} repo you
  should probably use the \reference{git-module}.
}{{{
  (use (.git (linux/alpine/git)))

  (let [url "https://github.com/vito/bass"
        ref "main"]
    (git:checkout url (git:ls-remote url ref)))
}}}{
  Using \b{git-ls-remote} to resolve \code{main} to a commit ensures the
  \b{git-checkout} call is \t{hermetic}.

  A non-hermetic thunk looks like this:
}{{{
  ; BAD
  (from (linux/alpine/git)
    ($ clone "https://github.com/vito/bass" ./))
}}}{
  If you run this thunk somewhere else it might return something different.
  It'll also be cached forever, so you'll never get new commits.

  Each input should specify an exact version to fetch. If you don't know it yet
  you can run another thunk to figure it out. You can keep \italic{that} thunk
  from being cached forever by labeling it with the current time. That's how
  \b{git-ls-remote} works under the hood.
}{{{
  (defn ls-remote [repo ref & timestamp]
    (-> ($ git ls-remote $repo $ref)
        (with-image *git-image*)
        (with-label :at (now 60)) ; rerun every minute
        (read :unix-table) ; line and space separated table output
        next    ; first row   : <ref> <sha>
        first)) ; first column: <ref>
}}}

\demo-literate{running tests}{
  To run tests, just run whatever command you would usually use to run tests.
}{{{
  (use (.git (linux/alpine/git)))

  (defn go-test [src & args]
    (from (linux/golang)
      (cd src
        ($ go test & $args))))

  (let [src git:github/vito/booklit/ref/master/]
    (succeeds? (go-test src ./tests/)))
}}}{
  Don't use Go? Use a different image and run a different command:
}{{{
  (defn cargo-test [src & args]
    (from (linux/rust)
      (cd src
        ($ cargo test & $args))))

  (let [src git:github/alacritty/alacritty/ref/master/]
    (succeeds? (cargo-test src ./alacritty_terminal/)))
}}}

\demo-literate{running services}{
  To run a service thunk, assign names to its ports using \b{with-port}. The
  provided ports will be healthchecked whenever the service runs.
}{{{
  (defn http-server [index]
    (from (linux/python)
      (-> ($ python -m http.server)
          (with-mount (mkfile ./index.html index) ./index.html)
          (with-port :http 8000))))

  (http-server "Hello, world!")
}}}{
  You can use \b{addr} to construct a \t{thunk addr}. A thunk addr is like a
  \t{thunk path} except it references a named port provided by the thunk rather
  than a file created by it.
}{{{
  (defn echo [msg]
    (let [server (http-server msg)]
      (from (linux/alpine)
        ($ wget -O- (addr server :http "http://$host:$port")))))

  (echo "Hello, world!")
}}}{
  Like thunks and thunk paths, thunk addrs are just data values. The underlying
  service thunk only runs when another thunk that needs it runs.
}{{{
  (run (echo "Hello, world!"))
}}}

\demo-literate{building & publishing artifacts}{
  To build from source just run whatever build command you already use.
}{{{
  (use (.git (linux/alpine/git)))

  (defn go-build [src & args]
    (from (linux/golang)
      (cd src
        (-> ($ go build & $args)
            (with-env {:CGO_ENABLED "0"})))))

  (let [src git:github/vito/booklit/ref/master/
        built (go-build src "./cmd/booklit")]
    (-> (from (linux/alpine)
          ($ built/booklit --version))
        (read :raw)
        next))
}}}{
  Thunk paths can be serialized to JSON. If all thunks involved in its creation
  are \t{hermetic} the JSON structure represents a repeatable artifact.
}{{{
  (def built
    (go-build git:github/vito/booklit/ref/master/ "./cmd/booklit"))

  (emit built *stdout*)
}}}{
  \construction{The exact format is not finalized and probably needs versioning
  and deduping.}

  A thunk path's JSON form can be piped to \code{bass --export} to build the
  artifact and emit a \code{tar} stream.

  \commands{{
  cat thunk-path.json | bass --export | tar -xf -
  }}

  You can publish thunk path JSON as part of your release as a form of
  provenance:
}{{{
  (let [repro (mkfile ./file.json (json built))]
    (from (linux/nixery.dev/gh)
      ($ gh release create v0.0.1 $repro)))
}}}

\demo-literate{pinning dependencies}{
  To pin dependencies, configure a path to a \code{bass.lock} file as the magic
  \code{*memos*} binding.
}{{{
  (def *memos* *dir*/bass.lock)
}}}{
  The \b{linux} path root resolves an image reference to a digest and memoizes
  its result into \code{*memos*} if defined.
}{{{
  (run (from (linux/alpine) ; resolves linux/alpine and writes to *memos*
         ($ echo hi)))

  (run (from (linux/alpine) ; uses the digest from *memos*
         ($ cat $*memos*))) ; reveals the wizard behind the curtain
}}}{
  The \b{git-github} path root resolves a branch or tag reference to a commit
  and returns its \b{git-checkout}, memoizing the commit in \code{*memos*} if
  defined.
}{{{
  git:github/vito/booklit/ref/master/
}}}{
  Paths like above are often used with \b{use} to load Bass modules from
  \t{thunk paths}. Bass doesn't have its own package system; it uses thunks for
  that too.
}{{{
  (let [src git:github/vito/booklit/ref/master/]
    (use (src/bass/booklit.bass))
    (when (succeeds? (booklit:tests src))
      (booklit:build src "dev" "linux" "amd64")))
}}}{
  To re-evaluate and update all memoized results, run \code{bass --bump}:

  \commands{{
    bass --bump bass.lock
  }}

  This command loads each module and re-evalutes each memoized call, updating
  the \code{bass.lock} file in-place.
}

\demo-literate{webhook-driven CI/CD}{
  \link{Bass Loop}{https://loop.bass-lang.org} is a public service for calling
  Bass code in response to webhooks.

  First, install the \link{GitHub app}{https://github.com/apps/bass-ci} and put
  a script like this in your repo at \code{bass/github-hook}:
}{{{
  ; file for memoized dependency resolution
  (def *memos* *dir*/bass.lock)

  ; load dependencies
  (use (.git (linux/alpine/git))
       (git:github/vito/bass-loop/ref/main/bass/github.bass))

  ; run Go tests
  (defn go-test [src & args]
    (from (linux/golang)
      (cd src
        ($ go test & $args))))

  ; standard suite of validations for the repo
  (defn checks [src]
    {:test (go-test src "./...")})

  ; called by bass-loop
  (defn main []
    (for [event *stdin*]
      (github:check-hook event git:checkout checks)))
}}}{
  Next start a Bass runner to let Bass Loop use your local runtimes:

  \commands{{
  bass --runner myuser@github.bass-lang.org
  }}

  From here on anything that \code{myuser} does to the repo will route an event
  to the \code{bass/github-hook} script with \code{myuser}'s runners available
  for running thunks.

  The \bass{github:check-hook} helper handles check-related events by running
  thunks as GitHub status checks. Other events may be interpreted however you
  like.
}

\split-sections
\table-of-contents

\include-section{guide.lit}
\include-section{bassics.lit}
\include-section{stdlib.lit}
\include-section{meta.lit}
