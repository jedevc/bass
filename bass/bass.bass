; location to track dependency resolution
(def *memos*
  *dir*/bass.lock)

; load dependencies
(use (.git (linux/alpine/git))
     (git:github/vito/tabs/ref/main/nix.bass))

; clones the repo and checks out the given sha
(defn checkout [sha]
  (git:github/vito/bass/sha/ sha))

(defn git-submodules [src]
  (map (fn [[_ path]] (string->dir path))
       (-> ($ git config --file src/.gitmodules --get-regexp path)
           (with-image (linux/alpine/git))
           (read :unix-table)
           take-all)))

(provide [deps deps+go]
  ; monolithic image containing dependencies for building and testing
  (defn deps [src]
    (oci-load
      (nix:result
        (cd (glob src ./nix/ ./flake.nix ./flake.lock ./default.nix)
          ($ nix build ".#depsImage"))
        ./deps-image.tar)
      {:os "linux"}))

  ; deps with Go dependencies pre-fetched
  (defn deps+go [src]
    (let [submodule-paths (map src/ (git-submodules src))
          submodule-cp-args (conj submodule-paths ./)]
      (from (deps src)
        ($ cp src/go.mod src/go.sum ./)
        ($ cp -a & $submodule-cp-args)
        ($ go mod download)))))

(provide [build dist smoke-test tests docs coverage]
  (use (*dir*/buildkit.bass))

  (defn dist [src version os arch]
    (-> ($ make
           (str "VERSION=" version)
           (str "GOOS=" os)
           (str "GOARCH=" arch)
           dist)
        (with-deps-and-shims src)
        (subpath ./dist/)))

  ; compiles a bass binary for the given platform and puts it in an archive
  (defn build [src version os arch]
    (archive src (dist src version os arch) os arch))

  (defn with-deps-and-shims [thunk src]
    (-> thunk
        (with-mount
          (glob src
                ./**/*.go
                ./**/go.mod
                ./**/go.sum
                ./std/*.bass
                ./pkg/bass/testdata/**/*
                ./pkg/runtimes/testdata/**/*
                ./pkg/lsp/testdata/**/*
                ./Makefile)
          ./)
        (with-mount (make-shims src) ./pkg/runtimes/bin/)
        with-go-cache
        (with-image (deps+go src))))

  ; returns a thunk with the make targets built into the output directory, as
  ; an overlay of src
  (defn make-shims [src]
    (-> (from (deps+go src)
          (cd (glob src
                    ./pkg/runtimes/shim/
                    ./Makefile
                    ./go.mod
                    ./go.sum)
            ($ make -j shims)))
        (subpath ./pkg/runtimes/bin/)))

  ; creates an archive appropriate for the given platform
  (defn archive [src out os arch]
    (let [prefix (str "bass." os "-" arch)
          tgz-path (string->fs-path (str prefix ".tgz"))
          zip-path (string->fs-path (str prefix ".zip"))]
      (if (= os "windows")
        (zip src zip-path out ./bass)
        (tar-czf src tgz-path out ./bass))))

  (defn tar-czf [src tarname dir & files]
    (-> ($ tar -C $dir -czf $tarname & $files)
        (with-image (deps+go src))
        (subpath tarname)))

  (defn zip [src zipname dir & files]
    (-> ($ zip (../ zipname) & $files)
        (with-image (deps+go src))
        (with-mount dir ./content/)
        (with-dir ./content/)
        (subpath zipname)))

  ; runs a quick sanity check
  (defn check-dist [dist image]
    (let [unpacked (from image
                     ($ tar -zxf $dist))]
      (run (from unpacked
             ($ ./bass --version)))
      (if (succeeds? (from unpacked
                       ($ ldd ./bass)))
        (error "binary is not statically linked")
        :ok)))

  ; images to test the binary against
  (def smoke-tests
    [(linux/ubuntu)
     (linux/alpine)])

  ; runs a basic sanity check, ensuring the binary runs in a handful of
  ; platforms
  ;
  ; in reality this only checks the Linux binary since there are no
  ; Windows/Darwin runtimes yet
  (defn smoke-test [dist]
    (map (fn [image] (check-dist dist image))
         smoke-tests))

  (def test-depot
    (-> ($ certstrap init --cn bass --passphrase "")
        (with-image (linux/squareup/certstrap))
        (subpath ./out/)))

  (defn test-buildkit [os arch]
    (let [resolv (str "nameserver 10.73.0.1\n"
                      "nameserver 1.1.1.1\n"
                      "search dns.bass\n")]
      (from (buildkit:image os arch buildkit:test-config)
        ($ cp test-depot/bass.crt /etc/ssl/certs/bass.crt)
        ($ chmod "0400" /etc/ssl/certs/bass.crt)
        (-> ($ buildkitd --addr "tcp://0.0.0.0:6107")
            (with-mount (cache-dir "bass buildkitd" :locked) /var/lib/buildkit/)
            (with-mount (mkfile ./resolv.conf resolv) /etc/resolv.conf)
            (with-port :grpc 6107)
            insecure!))))

  (defn with-bass-and-buildkitd [thunk src]
    (let [buildkit (test-buildkit "linux" "amd64")
          buildkit-host (addr buildkit :grpc "tcp://$host:$port")
          built-bass (dist src "dev" "linux" "amd64")]
      (-> thunk
          (with-env {:BUILDKIT_HOST buildkit-host
                     :BASS_TLS_DEPOT "/etc/ssl/certs/bass-depot"})
          (with-mount built-bass/bass /bin/bass)
          (with-mount test-depot /etc/ssl/certs/bass-depot/)
          (with-deps-and-shims src))))

  ; returns a directory containing the built docs HTML
  (defn docs [src]
    (-> ($ ./docs/scripts/build)
        (with-bass-and-buildkitd src)
        (subpath ./docs/)))

  ; returns a thunk that runs the tests
  (defn tests [src testflags]
    (-> ($ go test & $testflags)
        with-go-cache
        (with-env {:SKIP_DAGGER_TESTS "true"})
        (with-bass-and-buildkitd src)))

  ; returns a thunk that will run the tests and return cover.html
  (defn coverage [src testflags]
    (from
      (-> ($ gotestsum --format testname --no-color=false --jsonfile ./tests.log
             --
             -cover
             -coverprofile ./cover.out
             -coverpkg ./...
             -covermode count
             & $testflags)
          with-go-cache
          (with-env {:SKIP_DAGGER_TESTS "true"})
          (with-bass-and-buildkitd src))

      ; report slow tests
      ($ gotestsum tool slowest --jsonfile ./tests.log --threshold "500ms")

      ; generate coverage report
      ($ go tool cover -html ./cover.out -o ./cover.html))))

; checks that the nix flake + build can run successfully
(defn nix-checks [src]
  (from nix:image
    (cd src
      (nix:with-cache ($ nix flake metadata))
      (nix:with-cache ($ nix flake check))
      (nix:with-cache ($ nix build)))))

(provide [release-notes]
  ; undoes line wrapping in a given file
  ;
  ; GitHub releases, for whatever reason, respect word wrapping in the release
  ; body which makes it look pretty hideous on the desktop.
  ;
  ; Returns a memory-backed file, so this can be shimmed in-place.
  (defn undo-wordwrap [src file]
    (mkfile ./wide.txt
            (-> ($ markdownfmt $file)
                (with-image (deps+go src))
                (read :raw)
                next)))

  ; returns the path to the release notes for the given version
  (defn release-notes [src version]
    (let [notes (string->fs-path (str version ".md"))]
      (undo-wordwrap src (src/notes/ notes)))))

(provide [release]
  (use (git:github/vito/tabs/ref/main/gh.bass))

  ; returns the github release module
  (defn release [token]
    (gh:release "vito/bass" token)))

(defn with-go-cache [thunk]
  (-> thunk
      (with-env {:GOCACHE /go/cache/build/
                 :GOMODCACHE /go/cache/mod/})
      (with-mount (cache-dir "bass go mod") /go/cache/mod/)
      (with-mount (cache-dir "bass go cache") /go/cache/build/)))
