#!/usr/bin/env bass

; file for memoized dependency resolution
(def *memos* *dir*/bass.lock)

; load dependencies
(use (.git (linux/alpine/git))
     (*dir*/bass.bass)
     (*dir*/util.bass)
     (git:github/vito/bass-loop/ref/main/bass/github.bass))

; standard suite of validations, ideally run pre-merge
(defn checks [src]
  {:build-linux (util:ls (bass:build src "dev" "linux" "amd64"))
   :build-darwin (util:ls (bass:build src "dev" "darwin" "amd64")
                     (bass:build src "dev" "darwin" "arm64"))
   :build-windows (util:ls (bass:build src "dev" "windows" "amd64"))
   :test (bass:tests src ["./..."])
   :nix (bass:nix-checks src)})

; tasks to run against the repo's default branch, i.e. post-merge
(defn builds [src]
  {:docs (util:ls (bass:docs src))})

; called by bass-loop
(defn main []
  (for [event *stdin*]
    (case event
      {:event "push"
       :payload {:after "0000000000000000000000000000000000000000"}}
      ; branch deleted; ignore
      null

      {:event "push"
       :payload {:ref ref
                 :after sha
                 :repository {:clone_url clone-url
                              :default_branch default-branch}}}
      (when (= ref (str "refs/heads/" default-branch))
        (start-checks sha (builds (git:checkout clone-url sha))))

      _
      (github:check-hook event git:checkout checks))))

; TODO: expose or re-integrate into bass-loop
(defn start-checks [sha checks]
  (map-pairs
    (fn [name thunk] (*loop*:start-check thunk (str name) sha))
    (scope->list checks)))
