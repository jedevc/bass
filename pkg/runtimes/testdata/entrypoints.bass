(defn tar-file [tar path]
  (defn find-file [stream]
    (let [file (next stream)
          info (meta file)
          name (path-name file)]
      (if (= name path)
        file
        (find-file stream))))

  (find-file (read tar :tar)))

(defn entrypoint [thunk]
  (let [config-path (-> (tar-file (export thunk) "manifest.json")
                        (read :json)
                        next
                        first ; contains array of manifests
                        :Config
                        string->fs-path)
        config (-> (tar-file (export thunk) (path-name config-path))
                   (read :json)
                   next
                   :config)]
    (:Entrypoint config null)))

(def from-image
  (from (linux/alpine/git :2.36.3)
    ($ git --version)))

(assert = "git version 2.36.3" (-> from-image (read :lines) next))
(assert = ["git"] (entrypoint from-image))

(def unset-image
  (from (linux/alpine/git :2.36.3)
    (with-entrypoint ($) [])
    ($ git --version)))

(assert = "git version 2.36.3"
  (-> unset-image (read :lines) next))
(assert null? (entrypoint unset-image))

(def set-thunk
  (from (linux/alpine)
    (with-entrypoint ($) ["sh"])))

(assert = ["sh"] (entrypoint set-thunk))

(def keeps-entrypoint
  (from set-thunk
    ($ echo "Hello, world!")))

(assert = ["sh"] (entrypoint keeps-entrypoint))
